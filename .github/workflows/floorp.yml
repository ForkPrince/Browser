permissions: write-all

name: "Build Floorp"

on:
  workflow_dispatch:
    inputs:
      name:
        type: string
        description: browser name
        required: true
      repo:
        type: string
        description: repo url
        required: true
      branch:
        type: string
        description: repo branch
        required: true

run-name: "${{inputs.repo}} - Windows ARM64 build"

jobs:
  win-build:
    runs-on: ubuntu-24.04

    steps:
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Change PPA mirror servers
        run: |
          sudo perl -p -i -e 's%(deb(?:-src|)\s+)https?://(?!archive\.canonical\.com|security\.ubuntu\.com)[^\s]+%$1http://archive.ubuntu.com/ubuntu/%' /etc/apt/sources.list
          sudo apt update

      - uses: actions/checkout@v4
        name: Clone
        with:
          submodules: 'recursive'
          repository: ${{inputs.repo}}
          # ref: ${{inputs.branch}}

      - name: Setup Disk & Swap Space
        run: |
          chmod +x .github/workflows/src/disk_swap_for_github_runner.sh
          .github/workflows/src/disk_swap_for_github_runner.sh

      - name: Configure Cache
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Setup
        run: |
          mkdir -p ~/win-cross

          cp ./.github/workflows/src/windows/aarch64/mozconfig_win_aarch64_pgo_base mozconfig

          echo 'ac_add_options --with-branding=browser/branding/official' >> mozconfig
          echo 'ac_add_options --with-l10n-base=$PWD/floorp/browser/locales/l10n-central' >> mozconfig

          echo "mk_add_options 'export RUSTC_WRAPPER=/home/runner/.mozbuild/sccache/sccache'" >> mozconfig
          echo "mk_add_options 'export CCACHE_CPP2=yes'" >> mozconfig
          echo "ac_add_options --with-ccache=/home/runner/.mozbuild/sccache/sccache" >> mozconfig
          echo "mk_add_options 'export SCCACHE_GHA_ENABLED=on'" >> mozconfig

          echo Setup wine
          aria2c "https://firefox-ci-tc.services.mozilla.com/api/index/v1/task/gecko.cache.level-1.toolchains.v3.linux64-wine.latest/artifacts/public%2Fbuild%2Fwine.tar.zst" -o wine.tar.zst
          tar --zstd -xvf wine.tar.zst -C ~/win-cross
          rm wine.tar.zst

          echo Setup Visual Studio
          sudo apt install -y msitools python3-pip
          ./mach python --virtualenv build taskcluster/scripts/misc/get_vs.py build/vs/vs2022.yaml ~/win-cross/vs2022
          chmod -R +x "$(echo ~)/win-cross/vs2022"

          ./mach --no-interactive bootstrap --application-choice browser
          echo "export LIB=\"$(cd ~/.mozbuild/clang/lib/clang/* && cd lib/windows && pwd)\"" >> mozconfig

          echo "DISPLAY_VERSION=$(cat ./browser/config/version_display.txt)" >> $GITHUB_ENV
          echo "UPDATE_CHANNEL=release" >> $GITHUB_ENV

      - name: Setup Rust
        run: |
          rustup target add aarch64-pc-windows-msvc --toolchain stable

          echo '[target.aarch64-pc-windows-msvc]' >> ~/.cargo/config
          echo 'linker = "rust-lld"' >> ~/.cargo/config

          export CARGO_INCREMENTAL=0

      - name: Build ðŸ”¨
        run: ./mach build

      - name: Retry Build if 1st build is failed ðŸ”¨
        if: failure()
        run: ./mach build

      - name: Package
        run: |
          ./mach package
          ./mach build
          ./mach package-multi-locale --locales ar cs da de el en-US en-GB es-ES fr hu id it ja ko lt nl nn-NO pl pt-BR pt-PT ru sv-SE th tr uk vi zh-CN zh-TW

      - name: Copy
        run: |
          mkdir ~/output
          arch="aarch64"
          arch_inst="win64-aarch64"

          cp obj-${arch}-pc-windows-msvc/dist/install/sea/${{inputs.name}}-*.en-US.${arch_inst}.installer-stub.exe ~/output/${{inputs.name}}-stub.installer.exe
          cp obj-${arch}-pc-windows-msvc/dist/${{inputs.name}}-*.en-US.${arch_inst}.zip ~/output/
          cp obj-${arch}-pc-windows-msvc/dist/install/sea/${{inputs.name}}-*.en-US.${arch_inst}.installer.exe ~/output/${{inputs.name}}-${arch_inst}.installer.exe

      - name: make name of publish archive
        shell: node {0}
        run: |
          const fs = require('fs');
          let name = process.env.GHA_default_name
          fs.appendFileSync(process.env.GITHUB_ENV, `ARTIFACT_NAME=${name}`);
        env:
          GHA_default_name: ${{inputs.name}}-windows-aarch

      - name: Publish Package
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.ARTIFACT_NAME}}
          path: ~/output

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: '${{inputs.name}}-${{inputs.branch}}'
          prerelease: true
          name: '${{inputs.repo}} ${{inputs.branch}}'
          artifacts: ${{env.ARTIFACT_NAME}}
